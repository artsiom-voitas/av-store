/*! For license information please see clients.js.LICENSE.txt */
(()=>{"use strict";var e={"./src/js/utils.js":(e,t,o)=>{o.r(t),o.d(t,{authorizedUserCheck:()=>l,checkUserData:()=>s,disableFormButton:()=>r,logout:()=>a,redirectToHome:()=>u,toggleInputWarning:()=>n,unauthorizedUserCheck:()=>i,userFinder:()=>c});let r=function(e,t){t.disabled=!e.checkValidity()},n=function(e,t){let o=document.querySelector(t).querySelector(".text-warning");e.checkValidity()?o.classList.remove("show"):o.classList.add("show")};const c=function(e){let t=JSON.parse(localStorage.getItem("users")),o=t.findIndex((t=>t.email===e));return-1===o?-1:t[o]};let s=function(e,t){let o=c(e);if(-1!==o)return o.password===t},a=function(){document.querySelector(".btn-logout").addEventListener("click",(function(){localStorage.removeItem("active-user"),d()}))},i=function(){setTimeout((function(){null===localStorage.getItem("active-user")&&d()}),1)},l=function(){setTimeout((function(){null!==localStorage.getItem("active-user")&&u()}),1)},u=function(){window.location.replace("./home.html")},d=function(){window.location.replace("./index.html")}}},t={};function o(r){var n=t[r];if(void 0!==n)return n.exports;var c=t[r]={exports:{}};return e[r](c,c.exports,o),c.exports}o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};(()=>{o.r(r);var e=o("./src/js/utils.js");(0,e.logout)();(async function(){const e=await fetch("https://gist.githubusercontent.com/oDASCo/3f4014d24dc79e1e29b58bfa96afaa1b/raw/677516ee3bd278f7e3d805108596ca431d00b629/db.json",{method:"GET",headers:{"Accept-Language":"en-US,ge"}});console.log("Response Headers",e.headers.get("expires"),e.headers.get("content-type")),console.log(e.ok);const t=await e.json();return Promise.resolve(t)})().then((e=>{console.log("Users",e)})),(0,e.unauthorizedUserCheck)()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50cy5qcyIsIm1hcHBpbmdzIjoiO3NQQUFBLElBQUlBLEVBQW9CLFNBQVVDLEVBQU1DLEdBQ3BDQSxFQUFhQyxVQUFZRixFQUFLRyxpQkFHOUJDLEVBQXFCLFNBQVVDLEVBQVlDLEdBQzNDLElBQ0lDLEVBRFlDLFNBQVNDLGNBQWNILEdBQ2ZHLGNBQWMsaUJBQ2pDSixFQUFXRixnQkFHWkksRUFBUUcsVUFBVUMsT0FBTyxRQUZ6QkosRUFBUUcsVUFBVUUsSUFBSSxTQU05QixNQUlNQyxFQUFhLFNBQVVDLEdBQ3pCLElBQUlDLEVBSkdDLEtBQUtDLE1BQU1DLGFBQWFDLFFBQVEsVUFLbkNDLEVBQU9MLEVBQU1NLFdBQVVELEdBQVFBLEVBQUtFLFFBQVVSLElBQ2xELE9BQWMsSUFBVk0sR0FDUSxFQUVETCxFQUFNSyxJQUlyQixJQUFJRyxFQUFnQixTQUFVVCxFQUFZVSxHQUN0QyxJQUFJSixFQUFPUCxFQUFXQyxHQUN0QixJQUFjLElBQVZNLEVBQ0EsT0FBT0EsRUFBSSxXQUFpQkksR0FJaENDLEVBQVMsV0FDVWpCLFNBQVNDLGNBQWMsZUFDN0JpQixpQkFBaUIsU0FBUyxXQUNuQ1IsYUFBYVMsV0FBVyxlQUN4QkMsUUFJSkMsRUFBd0IsV0FDeEJDLFlBQVcsV0FFUSxPQURGWixhQUFhQyxRQUFRLGdCQUU5QlMsTUFFTCxJQUdIRyxFQUFzQixXQUN0QkQsWUFBVyxXQUVRLE9BREZaLGFBQWFDLFFBQVEsZ0JBRTlCYSxNQUVMLElBR0hBLEVBQWlCLFdBQ2pCQyxPQUFPQyxTQUFTQyxRQUFRLGdCQUd4QlAsRUFBa0IsV0FDbEJLLE9BQU9DLFNBQVNDLFFBQVEsbUJDakV4QkMsRUFBMkIsR0FHL0IsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQkUsSUFBakJELEVBQ0gsT0FBT0EsRUFBYUUsUUFHckIsSUFBSUMsRUFBU04sRUFBeUJFLEdBQVksQ0FHakRHLFFBQVMsSUFPVixPQUhBRSxFQUFvQkwsR0FBVUksRUFBUUEsRUFBT0QsUUFBU0osR0FHL0NLLEVBQU9ELFFDcEJmSixFQUFvQk8sRUFBSSxDQUFDSCxFQUFTSSxLQUNqQyxJQUFJLElBQUlDLEtBQU9ELEVBQ1hSLEVBQW9CVSxFQUFFRixFQUFZQyxLQUFTVCxFQUFvQlUsRUFBRU4sRUFBU0ssSUFDNUVFLE9BQU9DLGVBQWVSLEVBQVNLLEVBQUssQ0FBRUksWUFBWSxFQUFNQyxJQUFLTixFQUFXQyxNQ0ozRVQsRUFBb0JVLEVBQUksQ0FBQ0ssRUFBS0MsSUFBVUwsT0FBT00sVUFBVUMsZUFBZUMsS0FBS0osRUFBS0MsR0NDbEZoQixFQUFvQm9CLEVBQUtoQixJQUNILG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDWCxPQUFPQyxlQUFlUixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEWixPQUFPQyxlQUFlUixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8seURDRHZEbkMsRUFBQUEsRUFBQUEsV0FJQW9DLGlCQUNJLE1BQU1DLFFBQVlDLE1BSE4sa0lBR3VCLENBQy9CQyxPQUFRLE1BQ1JDLFFBQVMsQ0FDTCxrQkFBbUIsY0FHM0JDLFFBQVFDLElBQUksbUJBQW9CTCxFQUFJRyxRQUFRZCxJQUFJLFdBQVlXLEVBQUlHLFFBQVFkLElBQUksaUJBQzVFZSxRQUFRQyxJQUFJTCxFQUFJTSxJQUVoQixNQUFNckQsUUFBYytDLEVBQUlPLE9BRXhCLE9BQU9DLFFBQVFDLFFBQVF4RCxJQUczQnlELEdBQWFDLE1BQU0xRCxJQUNmbUQsUUFBUUMsSUFBSSxRQUFTcEQsT0FHekJjLEVBQUFBLEVBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXYtc3RvcmUvLi9zcmMvanMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vYXYtc3RvcmUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYXYtc3RvcmUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2F2LXN0b3JlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vYXYtc3RvcmUvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9hdi1zdG9yZS8uL3NyYy9qcy9jbGllbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImxldCBkaXNhYmxlRm9ybUJ1dHRvbiA9IGZ1bmN0aW9uIChmb3JtLCBidXR0b25JbkZvcm0pIHtcclxuICAgIGJ1dHRvbkluRm9ybS5kaXNhYmxlZCA9ICFmb3JtLmNoZWNrVmFsaWRpdHkoKTtcclxufVxyXG5cclxubGV0IHRvZ2dsZUlucHV0V2FybmluZyA9IGZ1bmN0aW9uIChpbnB1dEZpZWxkLCBzZWxlY3Rvcikge1xyXG4gICAgbGV0IGZpbmRJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXHJcbiAgICBsZXQgd2FybmluZyA9IGZpbmRJbnB1dC5xdWVyeVNlbGVjdG9yKCcudGV4dC13YXJuaW5nJyk7XHJcbiAgICBpZiAoIWlucHV0RmllbGQuY2hlY2tWYWxpZGl0eSgpKSB7XHJcbiAgICAgICAgd2FybmluZy5jbGFzc0xpc3QuYWRkKCdzaG93JylcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgd2FybmluZy5jbGFzc0xpc3QucmVtb3ZlKCdzaG93JylcclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgdXNlckxpc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnMnKSk7XHJcbn1cclxuXHJcbmNvbnN0IHVzZXJGaW5kZXIgPSBmdW5jdGlvbiAoZW1haWxWYWx1ZSkge1xyXG4gICAgbGV0IHVzZXJzID0gdXNlckxpc3QoKTtcclxuICAgIGxldCB1c2VyID0gdXNlcnMuZmluZEluZGV4KHVzZXIgPT4gdXNlci5lbWFpbCA9PT0gZW1haWxWYWx1ZSk7XHJcbiAgICBpZiAodXNlciA9PT0gLTEpIHtcclxuICAgICAgICByZXR1cm4gLTFcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHVzZXJzW3VzZXJdO1xyXG4gICAgfVxyXG59XHJcblxyXG5sZXQgY2hlY2tVc2VyRGF0YSA9IGZ1bmN0aW9uIChlbWFpbFZhbHVlLCBwYXNzd29yZFZhbHVlKSB7XHJcbiAgICBsZXQgdXNlciA9IHVzZXJGaW5kZXIoZW1haWxWYWx1ZSk7XHJcbiAgICBpZiAodXNlciAhPT0gLTEpIHtcclxuICAgICAgICByZXR1cm4gdXNlclsncGFzc3dvcmQnXSA9PT0gcGFzc3dvcmRWYWx1ZTtcclxuICAgIH1cclxufVxyXG5cclxubGV0IGxvZ291dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGxldCBsb2dvdXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYnRuLWxvZ291dCcpO1xyXG4gICAgbG9nb3V0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdhY3RpdmUtdXNlcicpO1xyXG4gICAgICAgIHJlZGlyZWN0VG9Mb2dpbigpXHJcbiAgICB9KVxyXG59XHJcblxyXG5sZXQgdW5hdXRob3JpemVkVXNlckNoZWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbGV0IHN0YXR1cyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhY3RpdmUtdXNlcicpXHJcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZWRpcmVjdFRvTG9naW4oKVxyXG4gICAgICAgIH1cclxuICAgIH0sIDEpXHJcbn1cclxuXHJcbmxldCBhdXRob3JpemVkVXNlckNoZWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbGV0IHN0YXR1cyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhY3RpdmUtdXNlcicpXHJcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZWRpcmVjdFRvSG9tZSgpXHJcbiAgICAgICAgfVxyXG4gICAgfSwgMSlcclxufVxyXG5cclxubGV0IHJlZGlyZWN0VG9Ib21lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoJy4vaG9tZS5odG1sJylcclxufVxyXG5cclxubGV0IHJlZGlyZWN0VG9Mb2dpbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKCcuL2luZGV4Lmh0bWwnKVxyXG59XHJcblxyXG5leHBvcnQge1xyXG4gICAgZGlzYWJsZUZvcm1CdXR0b24sXHJcbiAgICB0b2dnbGVJbnB1dFdhcm5pbmcsXHJcbiAgICBjaGVja1VzZXJEYXRhLFxyXG4gICAgdXNlckZpbmRlcixcclxuICAgIGxvZ291dCxcclxuICAgIHVuYXV0aG9yaXplZFVzZXJDaGVjayxcclxuICAgIGF1dGhvcml6ZWRVc2VyQ2hlY2ssXHJcbiAgICByZWRpcmVjdFRvSG9tZVxyXG59XHJcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IHtcclxuICAgIGxvZ291dCxcclxuICAgIHVuYXV0aG9yaXplZFVzZXJDaGVjayxcclxufSBmcm9tICcuL3V0aWxzLmpzJ1xyXG5sb2dvdXQoKVxyXG5cclxubGV0IHVzZXJzRGF0YSA9ICdodHRwczovL2dpc3QuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29EQVNDby8zZjQwMTRkMjRkYzc5ZTFlMjliNThiZmE5NmFmYWExYi9yYXcvNjc3NTE2ZWUzYmQyNzhmN2UzZDgwNTEwODU5NmNhNDMxZDAwYjYyOS9kYi5qc29uJ1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hVc2VycygpIHtcclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVzZXJzRGF0YSwge1xyXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAnQWNjZXB0LUxhbmd1YWdlJzogJ2VuLVVTLGdlJyxcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgY29uc29sZS5sb2coJ1Jlc3BvbnNlIEhlYWRlcnMnLCByZXMuaGVhZGVycy5nZXQoJ2V4cGlyZXMnKSwgcmVzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSlcclxuICAgIGNvbnNvbGUubG9nKHJlcy5vaylcclxuXHJcbiAgICBjb25zdCB1c2VycyA9IGF3YWl0IHJlcy5qc29uKClcclxuXHJcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHVzZXJzKVxyXG59XHJcblxyXG5mZXRjaFVzZXJzKCkudGhlbigodXNlcnMpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdVc2VycycsIHVzZXJzKVxyXG59KVxyXG5cclxudW5hdXRob3JpemVkVXNlckNoZWNrKClcclxuXHJcbiJdLCJuYW1lcyI6WyJkaXNhYmxlRm9ybUJ1dHRvbiIsImZvcm0iLCJidXR0b25JbkZvcm0iLCJkaXNhYmxlZCIsImNoZWNrVmFsaWRpdHkiLCJ0b2dnbGVJbnB1dFdhcm5pbmciLCJpbnB1dEZpZWxkIiwic2VsZWN0b3IiLCJ3YXJuaW5nIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiYWRkIiwidXNlckZpbmRlciIsImVtYWlsVmFsdWUiLCJ1c2VycyIsIkpTT04iLCJwYXJzZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJ1c2VyIiwiZmluZEluZGV4IiwiZW1haWwiLCJjaGVja1VzZXJEYXRhIiwicGFzc3dvcmRWYWx1ZSIsImxvZ291dCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVJdGVtIiwicmVkaXJlY3RUb0xvZ2luIiwidW5hdXRob3JpemVkVXNlckNoZWNrIiwic2V0VGltZW91dCIsImF1dGhvcml6ZWRVc2VyQ2hlY2siLCJyZWRpcmVjdFRvSG9tZSIsIndpbmRvdyIsImxvY2F0aW9uIiwicmVwbGFjZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZCIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwiYXN5bmMiLCJyZXMiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJjb25zb2xlIiwibG9nIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlc29sdmUiLCJmZXRjaFVzZXJzIiwidGhlbiJdLCJzb3VyY2VSb290IjoiIn0=